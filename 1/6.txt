;; SICP Exercise 1.6
;;
;; Alyssa P. Hacker doesn't see why if needs to be provided as a special form. ``Why can't I just define it as an
;; ordinary procedure in terms of cond?'' she asks. Alyssa's friend Eva Lu Ator claims this can indeed be done,
;; and she defines a new version of if:
;;
;; (define (new-if predicate then-clause else-clause)
;;   (cond (predicate then-clause)
;;         (else else-clause)))
;;
;; Eva demonstrates the program for Alyssa:
;;
;; (new-if (= 2 3) 0 5)
;; 5
;;
;; (new-if (= 1 1) 0 5)
;; 0
;;
;; Delighted, Alyssa uses new-if to rewrite the square-root program:
;;
;; (define (sqrt-iter guess x)
;;   (new-if (good-enough? guess x)
;;           guess
;;           (sqrt-iter (improve guess x)
;;                      x)))
;;
;; What happens when Alyssa attempts to use this to compute square roots? Explain.

When Alyssa attempts to use the "new-if" the program will run indefinitely in a loop because
when the "if" special form is used it evaluate only one of the clauses, then-clause or else-clause.
The "new-if" defined doesn't have this property and then-clause and else-clause are evaluated
(because we are using an applicative-order interpreter) and this result in a loop because
sqrt-iter will call itself every time.