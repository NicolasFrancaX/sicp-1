;; SICP Exercise 1.5
;;
;; Ben Bitdiddle has invented a test to determine whether the interpreter he is faced with is using
;; applicative-order evaluation or normal-order evaluation. He defines the following two procedures:
;;
;; (define (p) (p))
;;
;; (define (test x y)
;;   (if (= x 0)
;;       0
;;       y))
;;
;; Then he evaluates the expression
;;
;; (test 0 (p))
;;
;; What behavior will Ben observe with an interpreter that uses applicative-order evaluation?
;; What behavior will he observe with an interpreter that uses normal-order evaluation? Explain your answer.
;; (Assume that the evaluation rule for the special form if is the same whether the interpreter is using normal
;; or applicative order: The predicate expression is evaluated first, and the result determines whether to evaluate
;; the consequent or the alternative expression.)

In applicative-order the interpreter try to replace x and y in the first step, since the value of y is (p), then the
interpreter try to evaluate (p) and it enters in a loop because (p) is calling itself.

In normal-order the interpreter retrieve the value of variables only when is required in a evaluation, when the if
is evaluated the interpreter replace x with the value 0 and do the comparation, since x is equal to 0, the interpreter
returns 0 and y nevers get evaluated, then the interpreter won't enter in the loop caused by the procedure (p).

